<?xml version="1.0" encoding="UTF-8"?>
<project name="Kandinsky-Filemanager" default="rebuild" basedir=".">
	<!-- root-Property f�r Zugriff auf das root-Verzeichnis -->
	<property name="root" location=".." />

	<!-- Angabe des zu ladenden Properties-Files -->
	<property file="build.properties" />

	<!-- die Libraries laden, die ben�tigt werden -->
	<path id="libraries">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	
	<path id="lib.path.ref">
	    <fileset dir="${lib}" includes="*.jar"/>
	  </path>

	<!-- die libraries für die Test-Dateien laden -->
	<path id="test-classpath">
		<!-- die oben referenzierten Libraries koennen auch hier wieder verwendet werden -->
		<path refid="libraries" />
		<!-- damit die Tests ausgefuehrt werden koennen, muessen die verwendeten Klassen aus dem normalen
		Package mit verwendet werden (kompiliert) -->
		<pathelement location="${classes}" />
		<pathelement location="${testclasses}" />
	</path>
	
	<path id="build.classpath">
	  <fileset dir="${lib}">
	     <include name="*.jar"/>
	  </fileset>
	</path>

	<pathconvert property="manifest.classpath" pathsep=" ">
	  <path refid="build.classpath"/>
	  <mapper>
	    <chainedmapper>
	       <flattenmapper/>
	       <globmapper from="*.jar" to="lib/*.jar"/>
	    </chainedmapper>
	  </mapper>
	</pathconvert>

	<target name="rebuild">
		<antcall target="clean" />
		<antcall target="init" />
		<antcall target="compile.all.sources" />
		<antcall target="junit"/>
		<antcall target="package"/>
		<antcall target="setup"/>
		<antcall target="javadoc"/>
	</target>

	<!-- Anlegen der vorausgesetzten Grundstruktur -->
	<target name="init">
		<!-- Ordner anlegen -->
		<mkdir dir="${build}" />
	</target>

	<!-- Bereinigen der Ordnerstruktur, die beim build erstellt wird -->
	<target name="clean" depends="init">
		<delete dir="${build}" failonerror="true" />
	</target>

	<!-- gemeinsamer Kompilieraufruf aller ben�tigten Sources -->
	<target name="compile.all.sources" depends="init">
		<antcall target="compile" />
		<antcall target="compile.test" />
	</target>

	<!-- Kompilieren der Quelldateien und Speichern in einem bestimmten Ordner -->
	<target name="compile" depends="init">
		<!-- Speicherort zuerst anlegen -->
		<mkdir dir="${classes}" />

		<!-- Mithilfe der Source die Java-Dateien suchen und kompilieren -->
		<javac srcdir="${source}" destdir="${classes}" debug="on" failonerror="true" includeantruntime="true">
			<!-- der classpath, der benötigt wird, kann hier spezifiziert werden -->
			<classpath>
				<path refid="libraries" />
			</classpath>
		</javac>

		<copy todir="${classes}">
			<fileset dir="${source}" includes="**/resources/**" />
		</copy>
		<copy todir="${classes}">
					<fileset dir="${source}" includes="**/*.properties" />
		</copy>
	</target>

	<!-- die kompilierten class-Dateien in einer JAR verpacken -->
	<target name="package" depends="init">
		<!-- aktuelle Zeit merken -->
		<tstamp>
			<format property="time" pattern="dd.MM.yyyy HH:mm:ss" locale="de,DE" />
		</tstamp>

		<!-- Pfad fuer den Speicherort der Jar erstellen -->
		<mkdir dir="${dist}" />

		<!-- .class-Dateien in JAR verpacken -->
		<jar destfile="${dist}/${jarname}">
			<fileset dir="${classes}" />

			<manifest>
				<attribute name="Implementation-Vendor" value="${vendor}" />
				<attribute name="Implementation-Title" value="${jarname}" />
				<attribute name="Implementation-Version" value="${version}" />
				<attribute name="Main-Class" value="${mainclass}" />
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Time" value="${time}" />
			     <attribute name="Class-Path" value="${manifest.classpath}"/>
			</manifest>
		</jar>

		<!-- .java-Dateien in eine Source-JAR verpacken -->
		<jar destfile="${dist}/${sourcejarname}">
			<fileset dir="${source}" />
			<manifest>
				<attribute name="Implementation-Vendor" value="${vendor}" />
				<attribute name="Implementation-Title" value="${jarname}" />
				<attribute name="Implementation-Version" value="${version}" />
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Time" value="${time}" />
			</manifest>
		</jar>
	</target>

	<!-- JUNIT-Java-Dateien kompilieren -->
	<target name="compile.test">
		<mkdir dir="${testclasses}" />
		<javac srcdir="${testsource}" destdir="${testclasses}" debug="on" failonerror="true" includeantruntime="true">
			<classpath>
				<path refid="test-classpath" />
			</classpath>
		</javac>
	</target>

	<!-- JUNIT-Tests ausfuehren -->
	<target name="junit" depends="compile.test">
		<mkdir dir="${testresults}" />
		<junit haltonfailure="true" >
			<classpath>
				<path refid="test-classpath" />
			</classpath>
			<formatter type="xml" usefile="true" />
			<test name="${junittest}" todir="${testresults}" />
		</junit>
	</target>

	<!-- das finale Setup erstellen -->
	<target name="setup" depends="init">
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			<classpath refid="libraries" />
		</taskdef>

		<!-- Aufruf des Setup-Copy-Tasks -->
		<antcall target="copy.setup" />
	</target>

	<!-- Kopieren der benoetigten Dateien in den Setup-Ordner -->
	<target name="copy.setup" depends="init">
		<echo>processing new setup folder=${setup}/${clientName}</echo>
		<!-- Setup-Ordner erstellen -->
		<mkdir dir="${setup}" />
		<!-- create log folder -->
		<mkdir dir="${setup}/log" />
		<!-- create lib folder -->
		<mkdir dir="${setup}/lib" />

		<!-- copy exe, resource folder, properties files and log4j-config -->
		<copy tofile="${setup}/${jarname}" file="${dist}/${jarname}" />
		<copy todir="${setup}">
			<fileset dir="${resources}" />
		</copy>

		<copy todir="${setup}/lib">
			<fileset dir="${lib}" excludes="**/sources/**" />
		</copy>
	</target>

	<!-- create JavaDoc -->
	<target name="javadoc" depends="init">
		<mkdir dir="${javadoc}" />
		<javadoc packagenames="*" sourcepath="${source}" access="package" destdir="${javadoc}" author="true" version="true" use="true" defaultexcludes="true" windowtitle="${clientName} v${version}" failonerror="true" maxmemory="512m">
			<classpath>
				<path refid="libraries" />
			</classpath>
			<doctitle>
				<![CDATA[<h1>Kandinsky FileManager</h1>]]>
			</doctitle>
		<bottom>
			<![CDATA[<i>Copyright Kandinsky. All Rights Reserved.</i>]]></bottom>
</javadoc>
</target>

</project>